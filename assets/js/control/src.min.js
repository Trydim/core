/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
// ESM COMPAT FLAG
__webpack_require__.r(__webpack_exports__);

// CONCATENATED MODULE: ./assets/js/const.js


/**
 * Global variables and simple functions
 */
const c = {
  DEBUG: true,

  PAGE_NAME: location.href,
  //FILES_PATH: '/',
  LINK_PATH: window['LINK_PATH'] || '/',
  MAIN_PHP_PATH: (window['LINK_PATH'] || '/') + 'index.php',
  PUBLIC_PAGE: (window['PUBLIC_PAGE'] || 'calculator'),

  CURRENT_EVENT: 'none',
  PHONE_MASK: '+7 (___) ___ __ __',

  // Global IDs
  // ------------------------------------------------------------------------------------------------
  ID: {
    AUTH_BLOCK: 'authBlock',
    POPUP: {
      title: 'popup_title',
    },
    PUBLIC_PAGE: 'publicPageLink'
  },

  CONST: {
    MODAL_DEF: 'modalDef',
  },

  CLASS_NAME: {
    SURFACE_FORM: 'active',

    // css класс который добавляется кнопкам сортировки
    SORT_BTN_CLASS: 'btn-light',
    // css класс который добавляется скрытым элементам
    HIDDEN_NODE: 'd-none',
    // css класс который добавляется неактивным элементам
    DISABLED_NODE: 'disabled',
    // css класс который добавляется при загрузке
    LOADING: 'loading-st1',
  },
};

// CONCATENATED MODULE: ./assets/js/control/query.js


// Query Object -----------------------------------------------------------------------------------------------------------------

const checkJSON = (data) => {
  try { return JSON.parse(data); }
  catch (e) { document.body.innerHTML = data; }
};

const query = (url, data, type = 'json') => {
  return fetch(url, {method: 'post', body: data})
    .then(res => type === 'json' ? res.text() : res).then(
      data => {
        if (type === 'json') return checkJSON(data, type);
        else return data[type]();
      },
      error => console.log(error),
    );
};

/**
 * @type {{Post: (function({url?: *, data?: *, type?: *}): Promise),
 * Get: (function({url: *, data: *, type?: *}): Promise)}}
 */
const q = {

  /**
   * @param url
   * @param data
   * @param type
   * @return {*}
   * @constructor
   */
  Get: ({url = c.MAIN_PHP_PATH, data, type = 'json'}) => query(url + '?' + data, '', type),

  /**
   * Fetch Post function
   * @param url
   * @param data
   * @param type
   * @returns {Promise<Response>}
   */
  Post: ({url = c.MAIN_PHP_PATH, data, type = 'json'}) => query(url, data, type),

};

// CONCATENATED MODULE: ./assets/js/control/func.js



const func = {

  // Simple and often used function
  // ------------------------------------------------------------------------------------------------

  log: (msg) => c.DEBUG && console.log('Error:' + msg),

  /**
   * @param id
   * @return {HTMLElement | {}}
   */
  gI: (id) => document.getElementById(id ? id.replace('#', '') : '') || func.log(id),

  /**
   * @param selector
   * @return {HTMLElement | {}}
   */
  qS: (selector) => document.querySelector(selector || '') || func.log(selector),

  /**
   *
   * @param selector {string} - css selector string
   * @param nodeKey {string/null} - param/key
   * @param value - value/function, function (this, Node list, current selector)
   * @return NodeListOf<HTMLElementTagNameMap[*]>|object
   */
  qA: (selector, nodeKey = null, value = null) => {
    let nodeList = document.querySelectorAll(selector);
    if (!nodeList) return {};
    if (nodeKey && value) nodeList.forEach((item) => {
      if(typeof value === 'function') {
        item.addEventListener(nodeKey, (e) => value.call(item, e, nodeList, selector));
        //item[nodeKey] = () => value.call(item, nodeList, selector);
      } else {
        item[nodeKey] = value;
      }
    });
    return nodeList;
  },

  /**
   * получить html шаблона
   *
   * @param id {string}
   * @return {string}
   */
  gT: (id) => { let node = func.gI(id); return node ? node.content.children[0].outerHTML : 'Not found template' + id},

  /**
   * Получить Node шаблона
   * @param id {string}
   * @returns {Node}
   */
  gTNode: (id) => func.gI(id).content.children[0].cloneNode(true),

  // перевод в число
  toNumber: (input) => +(input.replace(/(\s|\D)/g, '')),

  // Формат цифр (разделение пробелом)
  setFormat: (num) => (num.toFixed(0)).replace(/\B(?=(\d{3})+(?!\d))/g, " "),

  // Показать элементы, аргументы коллеции NodeList
  show: (...collection) => { collection.map(nodes => {
    if(!nodes) return;
    if(!nodes.forEach) nodes = [nodes];
    nodes.forEach(n => n.classList.remove(c.CLASS_NAME.HIDDEN_NODE));
  }) },

  /**
   * Скрыть элементы
   * @param collection
   */
  hide: (...collection) => { collection.map(nodes => {
    if(!nodes) return;
    if(!nodes.forEach) nodes = [nodes];
    nodes.forEach(n => n.classList.add(c.CLASS_NAME.HIDDEN_NODE));
  }) },

  /**
   * Очистить узел от дочерних элементов (почему-то быстрее чем через innerHTMl)
   * @param node
   * @returns {*}
   */
  eraseNode: (node) => {
    let n;
    while ((n = node.firstChild)) n.remove();
    return node;
  },

  /**
   * Replace latin to cyrillic symbol
   * @param value
   * @return {void | string}
   */
  replaceLetter: (value) => {
    let cyrillic = 'УКЕНХВАРОСМТ',
        latin    = 'YKEHXBAPOCMT',
        replacer = (match) => cyrillic.charAt(latin.indexOf(match)),
        letters  = new RegExp(`(${latin.split('').join('|')})`, 'gi');
    return value.replace(letters, replacer).replace(/(&nbsp| | )/g, '').toLowerCase(); // какой-то пробел
  },

  /**
   * replace ${key from obj} from template to value from obj
   * @param tmpString html string template
   * @param arrayObjects array of object
   * @return {string}
   */
  replaceTemplate: (tmpString, arrayObjects) => {
    let html = '';

    if (tmpString)
      if(!arrayObjects.map) arrayObjects = [arrayObjects];
    arrayObjects.map(item => {
      let tmp = tmpString.trim();
      Object.entries(item).map(v => {
        if(!v[1]) v[1] = '';
        v[1] = v[1].toString().replace(/"/g, '\''); //не помогло
        let reg = new RegExp(`\\\${${v[0]}}`, 'mgi');
        tmp     = tmp.replace(reg, v[1].toString()); // replace ${key from obj} from template to value from obj
      });

      html += tmp;
    })

    return html;
  },

  /**
   * Переписан без JQuery.(не зависим)
   * Секлекты должны иметь класс useToggleOption
   * Инпуты будут открывтать зависимые поля когда активен(checked)
   * Если добавить класс "opposite", то будут скрывать когда активен
   * цель data-target="name", у цели добавить в класс
   * опции селекта могут иметь data-target="name"
   * Если в классе цели добавить No, например nameNo, цель будет скрываться когда инпут выбран
   */
  relatedOption: () => {
    document.querySelectorAll('input[data-target]')
            .forEach(node => {
              let nameAttr = node.name ? `[name="${node.name}"]` : '';

              if (nameAttr) {
                node.onchange = () => {
                  let items = document.querySelectorAll(`input${nameAttr}`);

                  items.forEach(item => { // Скрываем все зависимые поля
                    let t = item.getAttribute('data-target');
                    //if (t) $('.' + t).hide().addClass('hidden');
                    if (t) document.querySelectorAll(`.${t}, .${t}No`)
                                   .forEach(i => i.classList.add('d-none'));
                  });

                  items.forEach(item => { // Открываем все зависимые поля
                    //if (t && item.checked) $('.' + t).show().removeClass('hidden');
                    let t    = item.getAttribute('data-target'),
                        flag = item.classList.contains('opposite') ? !item.checked : item.checked;
                    if (t && flag) document.querySelectorAll(`.${t}`)
                                           .forEach(i => i.classList.remove('d-none'));
                    if (t && !flag) document.querySelectorAll(`.${t}No`)
                                            .forEach(i => i.classList.remove('d-none'));
                  });

                };

              } else {
                let target    = node.getAttribute('data-target'), nodeTL = document.querySelectorAll(`.${target}`);
                node.onchange = () => {
                  if (node.checked) nodeTL.forEach(i => i.classList.remove('d-none')); else nodeTL.forEach(i => i.classList.add('d-none'));
                };
              }

              node.dispatchEvent(new Event('change'));
            });
    document.querySelectorAll('select.useToggleOption').forEach(node => {
      node.onchange = function () {

        let opList = this.options;

        for (let item in opList) // Скрыть все
          if (opList.hasOwnProperty(item)) {
            let target = opList[item].getAttribute('data-target'), nodeTL = document.querySelectorAll(`.${target}`);

            if (!opList[item].selected) nodeTL.forEach(i => i.classList.add('d-none'));
          }

        for (let item in opList) // Открыть нужные
          if (opList.hasOwnProperty(item)) {
            let target = opList[item].getAttribute('data-target'), nodeTL = document.querySelectorAll(`.${target}`);

            if (opList[item].selected) nodeTL.forEach(i => i.classList.remove('d-none'));
          }
      };

      node.dispatchEvent(new Event('change'));
    });
  },

  // Получить и скачать файл
  createLink: (fileName) => {
    //let date = new Date();
    //fileName += '_' + date.getDate() + ("0" + (date.getMonth() + 1)).slice(-2) + (date.getYear() - 100) + '_' + date.getHours() + date.getMinutes() + date.getSeconds() + '.pdf';
    let a = document.createElement('a');
    a.setAttribute('download', fileName);
    return a;
  },

  savePdf: (data) => {
    let link = func.createLink(data.name || 'Name');
    link.setAttribute('href', `data:application/pdf;base64,${data['pdfBody']}`);
    link.click();
  },

  // Маска для телефона
  maskInit: (node) => {
    const minValue = 2;

    const mask = (e) => {
      let target = e.target, i = 0,
          matrix = c.PHONE_MASK,
          def = matrix.replace(/\D/g, ""),
          val = target.value.replace(/\D/g, "");

      if (def.length >= val.length) val = def;
      target.value = matrix.replace(/./g,
        a => /[_\d]/.test(a) && i < val.length ? val.charAt(i++) : i >= val.length ? "" : a );

      if (e.type === "blur" && target.value.length <= minValue) target.value = "";
    }

    node.addEventListener('input', mask);
    node.addEventListener('focus', mask);
    node.addEventListener('blur', mask);
  },

  // Активировать элементы
  enable: (...collection) => {
    collection.map(nodes => {
      if(!nodes.forEach) nodes = [nodes];
      nodes.forEach(n => {

        n.classList.remove(c.CLASS_NAME.DISABLED_NODE);
        n.removeAttribute('disabled');

        /*switch (n.tagName) {
         case 'BUTTON': case 'INPUT': { }
         case 'A': { }
         }*/
      });
    });
  },

  // Деактивировать элементы
  disable: (...collection) => {
    collection.map(nodes => {
      if(!nodes.forEach) nodes = [nodes];
      nodes.forEach(n => {
        n.classList.add(c.CLASS_NAME.DISABLED_NODE);
        n.setAttribute('disabled', 'disabled');
      });
    });
  },

  // Добавить иконку загрузки
  setLoading: (node) => {
    if(!node) return;
    node.classList.add(c.CLASS_NAME.LOADING);
  },

  // Удалить иконку загрузки
  removeLoading: (node) => {
    node && node.classList.remove(c.CLASS_NAME.LOADING);
  },
}

const f = Object.assign(func, q);

// CONCATENATED MODULE: ./assets/js/control/components/component.js
// МОДУЛИ
//----------------------------------------------------------------------------------------------------------------------

// Модальное окно



const Modal = () => {
  let modal     = Object.create(null);
  modal.wrap    = f.gI('modalWrap');
  modal.window  = modal.wrap.querySelector('.modal');
  modal.title   = modal.wrap.querySelector('.modalT');
  modal.content = modal.wrap.querySelector('.modalC');

  modal.bindBtn = function () {
    this.wrap.querySelectorAll('.close-modal, .confirmYes, .closeBtn').forEach(n =>
      n.addEventListener('click', () => { modal.hide() }));
  }
  modal.btnConfig = function (key, param) {
    let node = this.wrap.querySelector('.' + key.replace('.', ''));
    node && param.value && (node.value = param.value);
  }

  /**
   * Show modal window
   * @param title Nodes | string[]
   * @param content Nodes | string[]
   */
  modal.show = function (title = '', content = '') {
    modal.wrap.classList.add('active');
    modal.window.classList.add('active');

    modal.title && title && f.eraseNode(modal.title).append(title);
    modal.content && content && f.eraseNode(modal.content).append(content);
  }

  modal.hide = function () {
    modal.wrap.classList.remove('active');
    modal.window.classList.remove('active');
    //c.eraseNode(modal.content);
  }

  modal.bindBtn();
  return modal;
}

// Всплывающее сообщение
class MessageToast {
  constructor() {
    let parentBlock   = document.querySelector('.navbar-collapse');
    this.messageBlock = document.createElement("div");
    this.messageBlock.classList.add('notification-container');
    this.messageBlock.classList.add('d-small');
    parentBlock.append(this.messageBlock);
  }

  checkMsq(msg, type) {
    if(!type) {
      this.setMessage(type);
      this.setColor('error');
    } else {
      this.setMessage(msg);
      this.setColor('success');
    }
  }

  setMessage(msg) {
    this.messageBlock.innerHTML = msg;
  }

  setColor(color) {
    this.messageBlock.classList.remove('success', 'warning', 'error');
    switch (color) {
      case 'success':
        this.messageBlock.classList.add('success');
        break;
      case 'warning':
        this.messageBlock.classList.add('warning');
        break;
      case 'error':
      default:
        this.messageBlock.classList.add('error');
        break;
    }
  }

  show(msg = 'message body', type = 'warning') {

    if(typeof type !== 'string') this.checkMsq(msg, type);
    else {
      this.setMessage(msg);
      this.setColor(type);
    }

    this.messageBlock.classList.remove('d-small');
    this.messageBlock.classList.add('d-large');

    setTimeout(() => {
      this.messageBlock.classList.add('d-small');
    }, 3000);
  }
}

// Печать
const Print = () => {
  let print   = Object.create(null);
  print.frame = document.createElement("iframe");
  print.data  = 'no content'; // html

  print.frame.onload = function () {
    this.sandbox  = 'allow-modals';
    this.contentDocument.body.append(print.data);
    this.contentWindow.print();
  }

  print.setContent = function (content, classList = []) {
    let container = document.createElement('div');
    classList.map(i => container.classList.add(i));
    container.innerHTML = content;
    this.data           = container;
  }

  print.print = function (content, classList = []) {
    this.setContent(content, classList);
    document.body.append(this.frame);
    this.frame.remove();
  }

  return print;
}

// Поиск
const Searching = () => {
  const obj = Object.create(null);

  obj.init = function (param) {
    let {popup = true, node, searchData,
          finishFunc = () => {},
          showResult = () => {}} = param,
        func = (e) => this.searchFocus(e);

    this.usePopup = popup;
    this.searchData = searchData;
    this.resultFunc = (index) => finishFunc(index);
    this.returnFunc = (resultIds) => showResult(this.resultTmp, resultIds);

    node.removeEventListener('focus', func);
    node.addEventListener('focus', func);
    node.dispatchEvent(new Event('focus'));
  }

  obj.setSearchData = function (data) {
    this.searchData = data;
    return this;
  }

  obj.search = function (need) {
    let pattern     = /(-|_|\(|\)|@)/gm,
        cyrillic    = 'УКЕНХВАРОСМТукенхваросмт',
        latin       = 'YKEHXBAPOCMTykehxbapocmt',
        //cyrillicKey = 'ЙЦУКЕНГШЩЗХЪФЫВАПРОЛДЖЭЯЧСМИТЬБЮйцукенгшщзхъфывапролджэячсмитьбю',
        //latinKey    = 'QWERTYUIOP{}ASDFGHJKL:\"ZXCVBNM<>qwertyuiop[]asdfghjkl;\'zxcvbnm,.',
        replacerLC    = (match) => latin.charAt(cyrillic.indexOf(match)),
        replacerCL    = (match) => cyrillic.charAt(latin.indexOf(match)),
        //replacerKeyLC = (match) => latinKey.charAt(cyrillicKey.indexOf(match)),
        //replacerKeyCL = (match) => cyrillicKey.charAt(latinKey.indexOf(match)),
        lettersL = new RegExp(`(${latin.split('').join('|')})`, 'gi'),
        lettersC = new RegExp(`(${cyrillic.split('').join('|')})`, 'gi');
    //funcKeyL = new RegExp(`(${latinKey.split('').join('|')})`, 'gi'),
    //funcKeyC = new RegExp(`(${cyrillicKey.split('').join('|')})`, 'gi');

    need = need.replace(pattern, '');
    if (need.includes(' ')) need += '|' + need.split(' ').reverse().join(' ');

    let regArr = [], i, test;

    (i = need.replace(lettersL, replacerCL).replace(/ /gm, '.+')) && regArr.push(i);
    (i = need.replace(lettersC, replacerLC).replace(/ /gm, '.+')) && regArr.push(i);
    //(i = need.replace(funcKeyL, replacerKeyCL).replace(/ /gm, '.+')) && regArr.push(i);
    //(i = need.replace(funcKeyC, replacerKeyLC).replace(/ /gm, '.+')) && regArr.push(i);
    //i = `${regArr.join('|')}`;
    test = new RegExp(`${regArr.join('|')}`, 'i');

    return Object.entries(this.searchData)
                 .map(i => test.test(i[1].replace(pattern, '')) && i[0]).filter(i => i);
  }

  obj.clear = function (inputNode) {
    inputNode.removeEventListener('input', inputNodeEvent);
    this.resultTmp.remove();
  }

  // Events
  const inputNodeEvent = function (e) {
    let value = e.target.value;
    if(value.length > 1) {
      f.show(this.resultTmp);
      this.returnFunc(this.search(value));
    } else {
      f.hide(this.resultTmp);
    }
  }

  obj.searchFocus = function (e) {
    let target = e.target,
        wrap = target.parentNode;

    if(this.usePopup && !this.resultTmp) {
      this.resultTmp = f.gTNode('searchResult');
      this.resultTmp.addEventListener('click', (e) => this.clickResult(e, target));
    }

    target.addEventListener('input', inputNodeEvent.bind(this));

    if(this.usePopup) {
      target.addEventListener('blur', () => setTimeout(() => this.clear(target), 100), {once: true});

      wrap.style.position = 'relative';
      wrap.append(this.resultTmp);
    }

    target.dispatchEvent(new Event('input'));
  }

  obj.clickResult = function (e, inputNode) {
    if(this.resultTmp === e.target) return;
    let index = +e.target.dataset.id;

    this.clear(inputNode);
    //inputNode.value = this.data[index].name;
    this.resultFunc(index);
  }

  return obj;
}

// Валидация
const valid = {
  debug: false,//c.DEBUG,
  valid: new Set(),
  idForm: 'authForm',
  idSubmit: 'btnConfirmSend',

  className: {
    load: c.CLASS_NAME.LOADING,
    error: 'cl-input-error',
    valid: 'cl-input-valid',
  },

  /**
   * @param sendFunc - function action
   * @param idForm - string id
   * @param idSubmit - string id BTN
   */
  init(sendFunc, idForm = false, idSubmit = false) {
    idForm && (this.idForm = idForm);
    idSubmit && (this.idSubmit = idSubmit);

    this.form = f.gI(this.idForm);
    this.btn  = f.gI(this.idSubmit);

    this.btn.onclick = (e) => this.confirm(e, sendFunc);

    if(this.debug) this.btnActivate();
    else {
      this.btnDisabled();
      this.form.querySelectorAll('input').forEach(n => {
        if (n.type === 'checkbox') n.addEventListener('click', (e) => this.validate(e));
        else n.addEventListener('keydown', (e) => this.keyEnter(e));
        n.addEventListener('blur', (e) => this.validate(e));
      });
    }
    f.maskInit(this.form.querySelector("input[type='tel']"));
  },

  // Активировать/Деактивировать кнопки
  btnActivate() {
    if (this.valid.size >= 2 || this.debug) this.btn.removeAttribute('disabled');
    else this.btn.setAttribute('disabled', 'disabled');
  },

  btnDisabled() {
    this.valid.clear();
    this.btnActivate();
  },

  keyEnter(e) {
    if (e.key === 'Enter') {
      e.target.dispatchEvent(new Event('blur'));
      e.target.blur();
    }
  },
  // Проверка валидации
  validate(e) {
    let node = e.target, reg;

    if (node.value.length > 0) {
      switch (node.name) {
        case 'name':
          if (node.value.length < 2) {
            this.setErrorValidate(node);
            return;
          }
          this.setValidated(node);
          break;

        case 'phone':
          //reg = /7( |-|_)*\(\d{3}\)( |-|_)*\d{3}( |-|_)\d{2}( |-|_)*\d{2}/;
          //reg = /^[\+]?[(]?[0-9]{3}[)]?[-\s\.]?[0-9]{3}[-\s\.]?[0-9]{4,6}$/im;
          reg = /[^\d|\(|\)|\s|\-|_|\+]/;
          if (node.value.length < 18 || reg.test(String(node.value).toLowerCase())) {
            this.setErrorValidate(node);
            return;
          }
          this.setValidated(node);
          break;

        case 'email':
          reg = /^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
          if (!reg.test(String(node.value).toLowerCase())) {
            this.setErrorValidate(node);
            return;
          }
          this.setValidated(node);
          break;

        /*case 'auth_form__info': // TODO нормальную проверку реквизитов
         if (node.value.length < 10) {
         this.setErrorValidate(node);
         return;
         }
         this.setValidated(node);
         break;*/

        case 'politic':
          if (node.checked) this.valid.add(node.id);
          else this.valid.delete(node.id);
          break;

        default: {
          this.setValidated(node);
          switch (node.type) { // TODO общие поля
            case 'text': {}
          }
        }
      }
    }

    this.btnActivate();
  },

  // Показать/Скрыть (ошибки) валидации
  setErrorValidate(node) {
    this.removeValidateClasses(node);
    node.classList.add(this.className.error);
    this.valid.delete(node.id);
  },
  setValidated(node) {
    this.removeValidateClasses(node);
    node.classList.add(this.className.valid);
    this.valid.add(node.id);
  },
  removeValidateClasses(node) { node.classList.remove(this.className.error, this.className.valid) },

  confirm(e, sendFunc) {
    // Loading
    this.btn.classList.add(this.className.load);

    let finished = () => {
      // Stop show Loading
      this.btn.classList.remove(this.className.load);

      this.form.querySelectorAll('input[type="text"], input[type="tel"], input[type="number"], input[type="email"]')
          .forEach(n => n.value = '');
      this.btnDisabled();
    }

    sendFunc(this.form, finished);
  },
}

// CONCATENATED MODULE: ./assets/js/control/src.js







/**
 * Словарь в будущем
 */
let dic = {
  data: {},
  setTitle(arr) {
    Object.assign(this.data, arr);
  },
  getTitle(key) {
    return key && this.data[key];
  },
};
/**
 * Template string can be param (%1, %2)
 * @param key - array, first item must be string
 * @returns {*}
 * @private
 */
const _ = (...key) => {
  if(key.length === 1) return dic.getTitle(key[0]);
  else {
    let str = dic.getTitle(key[0]);
    for(let i = 1; i< key.length; i++) {
      if(key[i]) str = str.replace(`%${i}`, key[i]);
    }
    return str;
  }
};
window._ = _;

const m = {

  initModal : Modal,
  initPrint : Print,

  searchInit: Searching,
  initValid : (sendFunc, idForm, idSubmit) => valid.init(sendFunc, idForm, idSubmit),

  showMsg: (msg, type) => new MessageToast().show(msg, type),
};

window.f = Object.assign(c, m, f);


/***/ })
/******/ ]);